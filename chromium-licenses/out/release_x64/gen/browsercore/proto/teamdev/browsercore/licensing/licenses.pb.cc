// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teamdev/browsercore/licensing/licenses.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "teamdev/browsercore/licensing/licenses.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace teamdev {
namespace browsercore {
namespace licensing {
class LicenseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<License> {
} _License_default_instance_;
class LicenseCheckRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LicenseCheckRequest> {
} _LicenseCheckRequest_default_instance_;

namespace protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicenseCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicenseCheckRequest, product_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicenseCheckRequest, product_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicenseCheckRequest, project_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LicenseCheckRequest, license_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(License)},
  { 6, -1, sizeof(LicenseCheckRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_License_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LicenseCheckRequest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "teamdev/browsercore/licensing/licenses.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _License_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LicenseCheckRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_teamdev_2fproto_2fcsharp_5foptions_2eproto::InitDefaults();
  _License_default_instance_.DefaultConstruct();
  _LicenseCheckRequest_default_instance_.DefaultConstruct();
  _LicenseCheckRequest_default_instance_.get_mutable()->license_ = const_cast< ::teamdev::browsercore::licensing::License*>(
      ::teamdev::browsercore::licensing::License::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n,teamdev/browsercore/licensing/licenses"
      ".proto\022\035teamdev.browsercore.licensing\032\"t"
      "eamdev/proto/csharp_options.proto\"\027\n\007Lic"
      "ense\022\014\n\004text\030\001 \001(\t\"\226\001\n\023LicenseCheckReque"
      "st\022\024\n\014product_name\030\001 \001(\t\022\027\n\017product_vers"
      "ion\030\002 \001(\t\022\027\n\017project_context\030\004 \001(\t\0227\n\007li"
      "cense\030\003 \001(\0132&.teamdev.browsercore.licens"
      "ing.LicenseBu\n(com.teamdev.jxbrowser.int"
      "ernal.licensingB\rLicensesProtoP\001\252\002$DotNe"
      "tBrowser.Internal.Licensing.Rpc\312\317$\017\n\rLic"
      "ensesProtob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 418);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "teamdev/browsercore/licensing/licenses.proto", &protobuf_RegisterTypes);
  ::protobuf_teamdev_2fproto_2fcsharp_5foptions_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int License::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

License::License()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:teamdev.browsercore.licensing.License)
}
License::License(const License& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:teamdev.browsercore.licensing.License)
}

void License::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

License::~License() {
  // @@protoc_insertion_point(destructor:teamdev.browsercore.licensing.License)
  SharedDtor();
}

void License::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void License::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* License::descriptor() {
  protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const License& License::default_instance() {
  protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::InitDefaults();
  return *internal_default_instance();
}

License* License::New(::google::protobuf::Arena* arena) const {
  License* n = new License;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void License::Clear() {
// @@protoc_insertion_point(message_clear_start:teamdev.browsercore.licensing.License)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:teamdev.browsercore.licensing.License)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "teamdev.browsercore.licensing.License.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:teamdev.browsercore.licensing.License)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:teamdev.browsercore.licensing.License)
  return false;
#undef DO_
}

void License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:teamdev.browsercore.licensing.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "teamdev.browsercore.licensing.License.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:teamdev.browsercore.licensing.License)
}

::google::protobuf::uint8* License::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:teamdev.browsercore.licensing.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "teamdev.browsercore.licensing.License.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:teamdev.browsercore.licensing.License)
  return target;
}

size_t License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teamdev.browsercore.licensing.License)
  size_t total_size = 0;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void License::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:teamdev.browsercore.licensing.License)
  GOOGLE_DCHECK_NE(&from, this);
  const License* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const License>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:teamdev.browsercore.licensing.License)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:teamdev.browsercore.licensing.License)
    MergeFrom(*source);
  }
}

void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:teamdev.browsercore.licensing.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void License::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:teamdev.browsercore.licensing.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teamdev.browsercore.licensing.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  return true;
}

void License::Swap(License* other) {
  if (other == this) return;
  InternalSwap(other);
}
void License::InternalSwap(License* other) {
  text_.Swap(&other->text_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata License::GetMetadata() const {
  protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// License

// string text = 1;
void License::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& License::text() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.License.text)
  return text_.GetNoArena();
}
void License::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teamdev.browsercore.licensing.License.text)
}
#if LANG_CXX11
void License::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teamdev.browsercore.licensing.License.text)
}
#endif
void License::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teamdev.browsercore.licensing.License.text)
}
void License::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teamdev.browsercore.licensing.License.text)
}
::std::string* License::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.License.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* License::release_text() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.License.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void License::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.License.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseCheckRequest::kProductNameFieldNumber;
const int LicenseCheckRequest::kProductVersionFieldNumber;
const int LicenseCheckRequest::kProjectContextFieldNumber;
const int LicenseCheckRequest::kLicenseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseCheckRequest::LicenseCheckRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:teamdev.browsercore.licensing.LicenseCheckRequest)
}
LicenseCheckRequest::LicenseCheckRequest(const LicenseCheckRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_name().size() > 0) {
    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  product_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_version().size() > 0) {
    product_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_version_);
  }
  project_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_context().size() > 0) {
    project_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_context_);
  }
  if (from.has_license()) {
    license_ = new ::teamdev::browsercore::licensing::License(*from.license_);
  } else {
    license_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:teamdev.browsercore.licensing.LicenseCheckRequest)
}

void LicenseCheckRequest::SharedCtor() {
  product_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_ = NULL;
  _cached_size_ = 0;
}

LicenseCheckRequest::~LicenseCheckRequest() {
  // @@protoc_insertion_point(destructor:teamdev.browsercore.licensing.LicenseCheckRequest)
  SharedDtor();
}

void LicenseCheckRequest::SharedDtor() {
  product_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete license_;
  }
}

void LicenseCheckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LicenseCheckRequest::descriptor() {
  protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LicenseCheckRequest& LicenseCheckRequest::default_instance() {
  protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::InitDefaults();
  return *internal_default_instance();
}

LicenseCheckRequest* LicenseCheckRequest::New(::google::protobuf::Arena* arena) const {
  LicenseCheckRequest* n = new LicenseCheckRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LicenseCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:teamdev.browsercore.licensing.LicenseCheckRequest)
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && license_ != NULL) {
    delete license_;
  }
  license_ = NULL;
}

bool LicenseCheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:teamdev.browsercore.licensing.LicenseCheckRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_name().data(), static_cast<int>(this->product_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "teamdev.browsercore.licensing.LicenseCheckRequest.product_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_version().data(), static_cast<int>(this->product_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "teamdev.browsercore.licensing.LicenseCheckRequest.product_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .teamdev.browsercore.licensing.License license = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_license()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_context = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_context()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_context().data(), static_cast<int>(this->project_context().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "teamdev.browsercore.licensing.LicenseCheckRequest.project_context"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:teamdev.browsercore.licensing.LicenseCheckRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:teamdev.browsercore.licensing.LicenseCheckRequest)
  return false;
#undef DO_
}

void LicenseCheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:teamdev.browsercore.licensing.LicenseCheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_name = 1;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), static_cast<int>(this->product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "teamdev.browsercore.licensing.LicenseCheckRequest.product_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_name(), output);
  }

  // string product_version = 2;
  if (this->product_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_version().data(), static_cast<int>(this->product_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "teamdev.browsercore.licensing.LicenseCheckRequest.product_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_version(), output);
  }

  // .teamdev.browsercore.licensing.License license = 3;
  if (this->has_license()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->license_, output);
  }

  // string project_context = 4;
  if (this->project_context().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_context().data(), static_cast<int>(this->project_context().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "teamdev.browsercore.licensing.LicenseCheckRequest.project_context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->project_context(), output);
  }

  // @@protoc_insertion_point(serialize_end:teamdev.browsercore.licensing.LicenseCheckRequest)
}

::google::protobuf::uint8* LicenseCheckRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:teamdev.browsercore.licensing.LicenseCheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_name = 1;
  if (this->product_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_name().data(), static_cast<int>(this->product_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "teamdev.browsercore.licensing.LicenseCheckRequest.product_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_name(), target);
  }

  // string product_version = 2;
  if (this->product_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_version().data(), static_cast<int>(this->product_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "teamdev.browsercore.licensing.LicenseCheckRequest.product_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product_version(), target);
  }

  // .teamdev.browsercore.licensing.License license = 3;
  if (this->has_license()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->license_, deterministic, target);
  }

  // string project_context = 4;
  if (this->project_context().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_context().data(), static_cast<int>(this->project_context().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "teamdev.browsercore.licensing.LicenseCheckRequest.project_context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->project_context(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:teamdev.browsercore.licensing.LicenseCheckRequest)
  return target;
}

size_t LicenseCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teamdev.browsercore.licensing.LicenseCheckRequest)
  size_t total_size = 0;

  // string product_name = 1;
  if (this->product_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_name());
  }

  // string product_version = 2;
  if (this->product_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_version());
  }

  // string project_context = 4;
  if (this->project_context().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_context());
  }

  // .teamdev.browsercore.licensing.License license = 3;
  if (this->has_license()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->license_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LicenseCheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:teamdev.browsercore.licensing.LicenseCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseCheckRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LicenseCheckRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:teamdev.browsercore.licensing.LicenseCheckRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:teamdev.browsercore.licensing.LicenseCheckRequest)
    MergeFrom(*source);
  }
}

void LicenseCheckRequest::MergeFrom(const LicenseCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:teamdev.browsercore.licensing.LicenseCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_name().size() > 0) {

    product_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_name_);
  }
  if (from.product_version().size() > 0) {

    product_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_version_);
  }
  if (from.project_context().size() > 0) {

    project_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_context_);
  }
  if (from.has_license()) {
    mutable_license()->::teamdev::browsercore::licensing::License::MergeFrom(from.license());
  }
}

void LicenseCheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:teamdev.browsercore.licensing.LicenseCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseCheckRequest::CopyFrom(const LicenseCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teamdev.browsercore.licensing.LicenseCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseCheckRequest::IsInitialized() const {
  return true;
}

void LicenseCheckRequest::Swap(LicenseCheckRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseCheckRequest::InternalSwap(LicenseCheckRequest* other) {
  product_name_.Swap(&other->product_name_);
  product_version_.Swap(&other->product_version_);
  project_context_.Swap(&other->project_context_);
  std::swap(license_, other->license_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LicenseCheckRequest::GetMetadata() const {
  protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LicenseCheckRequest

// string product_name = 1;
void LicenseCheckRequest::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LicenseCheckRequest::product_name() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
  return product_name_.GetNoArena();
}
void LicenseCheckRequest::set_product_name(const ::std::string& value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}
#if LANG_CXX11
void LicenseCheckRequest::set_product_name(::std::string&& value) {
  
  product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}
#endif
void LicenseCheckRequest::set_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}
void LicenseCheckRequest::set_product_name(const char* value, size_t size) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}
::std::string* LicenseCheckRequest::mutable_product_name() {
  
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LicenseCheckRequest::release_product_name() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
  
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LicenseCheckRequest::set_allocated_product_name(::std::string* product_name) {
  if (product_name != NULL) {
    
  } else {
    
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}

// string product_version = 2;
void LicenseCheckRequest::clear_product_version() {
  product_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LicenseCheckRequest::product_version() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
  return product_version_.GetNoArena();
}
void LicenseCheckRequest::set_product_version(const ::std::string& value) {
  
  product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}
#if LANG_CXX11
void LicenseCheckRequest::set_product_version(::std::string&& value) {
  
  product_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}
#endif
void LicenseCheckRequest::set_product_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}
void LicenseCheckRequest::set_product_version(const char* value, size_t size) {
  
  product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}
::std::string* LicenseCheckRequest::mutable_product_version() {
  
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
  return product_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LicenseCheckRequest::release_product_version() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
  
  return product_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LicenseCheckRequest::set_allocated_product_version(::std::string* product_version) {
  if (product_version != NULL) {
    
  } else {
    
  }
  product_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_version);
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}

// string project_context = 4;
void LicenseCheckRequest::clear_project_context() {
  project_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LicenseCheckRequest::project_context() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
  return project_context_.GetNoArena();
}
void LicenseCheckRequest::set_project_context(const ::std::string& value) {
  
  project_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}
#if LANG_CXX11
void LicenseCheckRequest::set_project_context(::std::string&& value) {
  
  project_context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}
#endif
void LicenseCheckRequest::set_project_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}
void LicenseCheckRequest::set_project_context(const char* value, size_t size) {
  
  project_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}
::std::string* LicenseCheckRequest::mutable_project_context() {
  
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
  return project_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LicenseCheckRequest::release_project_context() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
  
  return project_context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LicenseCheckRequest::set_allocated_project_context(::std::string* project_context) {
  if (project_context != NULL) {
    
  } else {
    
  }
  project_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_context);
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}

// .teamdev.browsercore.licensing.License license = 3;
bool LicenseCheckRequest::has_license() const {
  return this != internal_default_instance() && license_ != NULL;
}
void LicenseCheckRequest::clear_license() {
  if (GetArenaNoVirtual() == NULL && license_ != NULL) delete license_;
  license_ = NULL;
}
const ::teamdev::browsercore::licensing::License& LicenseCheckRequest::license() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.LicenseCheckRequest.license)
  return license_ != NULL ? *license_
                         : *::teamdev::browsercore::licensing::License::internal_default_instance();
}
::teamdev::browsercore::licensing::License* LicenseCheckRequest::mutable_license() {
  
  if (license_ == NULL) {
    license_ = new ::teamdev::browsercore::licensing::License;
  }
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.LicenseCheckRequest.license)
  return license_;
}
::teamdev::browsercore::licensing::License* LicenseCheckRequest::release_license() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.LicenseCheckRequest.license)
  
  ::teamdev::browsercore::licensing::License* temp = license_;
  license_ = NULL;
  return temp;
}
void LicenseCheckRequest::set_allocated_license(::teamdev::browsercore::licensing::License* license) {
  delete license_;
  license_ = license;
  if (license) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.LicenseCheckRequest.license)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace licensing
}  // namespace browsercore
}  // namespace teamdev

// @@protoc_insertion_point(global_scope)
