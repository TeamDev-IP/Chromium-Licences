// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teamdev/browsercore/licensing/licenses.proto

#ifndef PROTOBUF_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto__INCLUDED
#define PROTOBUF_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "teamdev/proto/csharp_options.pb.h"
// @@protoc_insertion_point(includes)
namespace teamdev {
namespace browsercore {
namespace licensing {
class License;
class LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
class LicenseCheckRequest;
class LicenseCheckRequestDefaultTypeInternal;
extern LicenseCheckRequestDefaultTypeInternal _LicenseCheckRequest_default_instance_;
}  // namespace licensing
}  // namespace browsercore
}  // namespace teamdev

namespace teamdev {
namespace browsercore {
namespace licensing {

namespace protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto

// ===================================================================

class License : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:teamdev.browsercore.licensing.License) */ {
 public:
  License();
  virtual ~License();

  License(const License& from);

  inline License& operator=(const License& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const License& default_instance();

  static inline const License* internal_default_instance() {
    return reinterpret_cast<const License*>(
               &_License_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(License* other);

  // implements Message ----------------------------------------------

  inline License* New() const PROTOBUF_FINAL { return New(NULL); }

  License* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const License& from);
  void MergeFrom(const License& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(License* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:teamdev.browsercore.licensing.License)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable int _cached_size_;
  friend struct protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LicenseCheckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:teamdev.browsercore.licensing.LicenseCheckRequest) */ {
 public:
  LicenseCheckRequest();
  virtual ~LicenseCheckRequest();

  LicenseCheckRequest(const LicenseCheckRequest& from);

  inline LicenseCheckRequest& operator=(const LicenseCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LicenseCheckRequest& default_instance();

  static inline const LicenseCheckRequest* internal_default_instance() {
    return reinterpret_cast<const LicenseCheckRequest*>(
               &_LicenseCheckRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(LicenseCheckRequest* other);

  // implements Message ----------------------------------------------

  inline LicenseCheckRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LicenseCheckRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LicenseCheckRequest& from);
  void MergeFrom(const LicenseCheckRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LicenseCheckRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_name = 1;
  void clear_product_name();
  static const int kProductNameFieldNumber = 1;
  const ::std::string& product_name() const;
  void set_product_name(const ::std::string& value);
  #if LANG_CXX11
  void set_product_name(::std::string&& value);
  #endif
  void set_product_name(const char* value);
  void set_product_name(const char* value, size_t size);
  ::std::string* mutable_product_name();
  ::std::string* release_product_name();
  void set_allocated_product_name(::std::string* product_name);

  // string product_version = 2;
  void clear_product_version();
  static const int kProductVersionFieldNumber = 2;
  const ::std::string& product_version() const;
  void set_product_version(const ::std::string& value);
  #if LANG_CXX11
  void set_product_version(::std::string&& value);
  #endif
  void set_product_version(const char* value);
  void set_product_version(const char* value, size_t size);
  ::std::string* mutable_product_version();
  ::std::string* release_product_version();
  void set_allocated_product_version(::std::string* product_version);

  // string project_context = 4;
  void clear_project_context();
  static const int kProjectContextFieldNumber = 4;
  const ::std::string& project_context() const;
  void set_project_context(const ::std::string& value);
  #if LANG_CXX11
  void set_project_context(::std::string&& value);
  #endif
  void set_project_context(const char* value);
  void set_project_context(const char* value, size_t size);
  ::std::string* mutable_project_context();
  ::std::string* release_project_context();
  void set_allocated_project_context(::std::string* project_context);

  // .teamdev.browsercore.licensing.License license = 3;
  bool has_license() const;
  void clear_license();
  static const int kLicenseFieldNumber = 3;
  const ::teamdev::browsercore::licensing::License& license() const;
  ::teamdev::browsercore::licensing::License* mutable_license();
  ::teamdev::browsercore::licensing::License* release_license();
  void set_allocated_license(::teamdev::browsercore::licensing::License* license);

  // @@protoc_insertion_point(class_scope:teamdev.browsercore.licensing.LicenseCheckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_name_;
  ::google::protobuf::internal::ArenaStringPtr product_version_;
  ::google::protobuf::internal::ArenaStringPtr project_context_;
  ::teamdev::browsercore::licensing::License* license_;
  mutable int _cached_size_;
  friend struct protobuf_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// License

// string text = 1;
inline void License::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& License::text() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.License.text)
  return text_.GetNoArena();
}
inline void License::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teamdev.browsercore.licensing.License.text)
}
#if LANG_CXX11
inline void License::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teamdev.browsercore.licensing.License.text)
}
#endif
inline void License::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teamdev.browsercore.licensing.License.text)
}
inline void License::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teamdev.browsercore.licensing.License.text)
}
inline ::std::string* License::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.License.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* License::release_text() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.License.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void License::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.License.text)
}

// -------------------------------------------------------------------

// LicenseCheckRequest

// string product_name = 1;
inline void LicenseCheckRequest::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseCheckRequest::product_name() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
  return product_name_.GetNoArena();
}
inline void LicenseCheckRequest::set_product_name(const ::std::string& value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}
#if LANG_CXX11
inline void LicenseCheckRequest::set_product_name(::std::string&& value) {
  
  product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}
#endif
inline void LicenseCheckRequest::set_product_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}
inline void LicenseCheckRequest::set_product_name(const char* value, size_t size) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}
inline ::std::string* LicenseCheckRequest::mutable_product_name() {
  
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseCheckRequest::release_product_name() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
  
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseCheckRequest::set_allocated_product_name(::std::string* product_name) {
  if (product_name != NULL) {
    
  } else {
    
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.LicenseCheckRequest.product_name)
}

// string product_version = 2;
inline void LicenseCheckRequest::clear_product_version() {
  product_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseCheckRequest::product_version() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
  return product_version_.GetNoArena();
}
inline void LicenseCheckRequest::set_product_version(const ::std::string& value) {
  
  product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}
#if LANG_CXX11
inline void LicenseCheckRequest::set_product_version(::std::string&& value) {
  
  product_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}
#endif
inline void LicenseCheckRequest::set_product_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}
inline void LicenseCheckRequest::set_product_version(const char* value, size_t size) {
  
  product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}
inline ::std::string* LicenseCheckRequest::mutable_product_version() {
  
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
  return product_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseCheckRequest::release_product_version() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
  
  return product_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseCheckRequest::set_allocated_product_version(::std::string* product_version) {
  if (product_version != NULL) {
    
  } else {
    
  }
  product_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_version);
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.LicenseCheckRequest.product_version)
}

// string project_context = 4;
inline void LicenseCheckRequest::clear_project_context() {
  project_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseCheckRequest::project_context() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
  return project_context_.GetNoArena();
}
inline void LicenseCheckRequest::set_project_context(const ::std::string& value) {
  
  project_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}
#if LANG_CXX11
inline void LicenseCheckRequest::set_project_context(::std::string&& value) {
  
  project_context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}
#endif
inline void LicenseCheckRequest::set_project_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}
inline void LicenseCheckRequest::set_project_context(const char* value, size_t size) {
  
  project_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}
inline ::std::string* LicenseCheckRequest::mutable_project_context() {
  
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
  return project_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseCheckRequest::release_project_context() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
  
  return project_context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseCheckRequest::set_allocated_project_context(::std::string* project_context) {
  if (project_context != NULL) {
    
  } else {
    
  }
  project_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_context);
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.LicenseCheckRequest.project_context)
}

// .teamdev.browsercore.licensing.License license = 3;
inline bool LicenseCheckRequest::has_license() const {
  return this != internal_default_instance() && license_ != NULL;
}
inline void LicenseCheckRequest::clear_license() {
  if (GetArenaNoVirtual() == NULL && license_ != NULL) delete license_;
  license_ = NULL;
}
inline const ::teamdev::browsercore::licensing::License& LicenseCheckRequest::license() const {
  // @@protoc_insertion_point(field_get:teamdev.browsercore.licensing.LicenseCheckRequest.license)
  return license_ != NULL ? *license_
                         : *::teamdev::browsercore::licensing::License::internal_default_instance();
}
inline ::teamdev::browsercore::licensing::License* LicenseCheckRequest::mutable_license() {
  
  if (license_ == NULL) {
    license_ = new ::teamdev::browsercore::licensing::License;
  }
  // @@protoc_insertion_point(field_mutable:teamdev.browsercore.licensing.LicenseCheckRequest.license)
  return license_;
}
inline ::teamdev::browsercore::licensing::License* LicenseCheckRequest::release_license() {
  // @@protoc_insertion_point(field_release:teamdev.browsercore.licensing.LicenseCheckRequest.license)
  
  ::teamdev::browsercore::licensing::License* temp = license_;
  license_ = NULL;
  return temp;
}
inline void LicenseCheckRequest::set_allocated_license(::teamdev::browsercore::licensing::License* license) {
  delete license_;
  license_ = license;
  if (license) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:teamdev.browsercore.licensing.LicenseCheckRequest.license)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace licensing
}  // namespace browsercore
}  // namespace teamdev

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_teamdev_2fbrowsercore_2flicensing_2flicenses_2eproto__INCLUDED
